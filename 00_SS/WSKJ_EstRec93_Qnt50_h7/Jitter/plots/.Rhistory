profile.label= "Linf",
component = "Surv_like",
main = "Changes in Index likelihoods by fleet",
add_cutoff = F,
cutoff_prob = 0.95, legendloc="topleft")
dev.off()
mydir <- "C:/Users/demersais/Desktop/Cabrinha/Likehood_steep"
# read starter file
starter <- SS_readstarter(file.path(mydir, 'starter.ss'))
# change control file name in the starter file
starter$ctlfile <- "control_modified.ss"
# make sure the prior likelihood is calculated
# for non-estimated quantities
starter$prior_like <- 1
# write modified starter file
SS_writestarter(starter, dir=mydir, overwrite=TRUE)
# vector of values to profile over
h.vec <- seq(0.5
,0.9
,0.05)
Nprofile <- length(h.vec)
# run SS_profile command
profile <- SS_profile(dir=mydir, # directory
# "NatM" is a subset of one of the
# parameter labels in control.ss_new
model="ss",
masterctlfile="control.ss_new",
newctlfile="control_modified.ss",
string="steep",
profilevec=h.vec)
mydir <- "C:/Users/demersais/Desktop/Cabrinha/Likehood_steep"
# read starter file
starter <- SS_readstarter(file.path(mydir, 'starter.ss'))
library(r4ss)
mydir <- "C:/Users/demersais/Desktop/Cabrinha/Likehood_steep"
# read starter file
starter <- SS_readstarter(file.path(mydir, 'starter.ss'))
# change control file name in the starter file
starter$ctlfile <- "control_modified.ss"
# make sure the prior likelihood is calculated
# for non-estimated quantities
starter$prior_like <- 1
# write modified starter file
SS_writestarter(starter, dir=mydir, overwrite=TRUE)
# vector of values to profile over
h.vec <- seq(0.5
,0.9
,0.05)
Nprofile <- length(h.vec)
# run SS_profile command
profile <- SS_profile(dir=mydir, # directory
# "NatM" is a subset of one of the
# parameter labels in control.ss_new
model="ss",
masterctlfile="control.ss_new",
newctlfile="control_modified.ss",
string="steep",
profilevec=h.vec)
# read the output files (with names like Report1.sso, Report2.sso, etc.)
profilemodels <- SSgetoutput(dirvec=mydir, keyvec =1:Nprofile)
# summarize output
profilesummary <- SSsummarize(profilemodels)
mainlike_components         <- c('TOTAL',"Survey", "Discard", 'Length_comp',"Age_comp",'Recruitment')
mainlike_components_labels  <- c('Total likelihood','Index likelihood',"Discard",'Length likelihood',"Age likelihood",'Recruitment likelihood')
# plot profile using summary created above
png(file.path(mydir,"Steep_profile_plot.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
SSplotProfile(profilesummary,           # summary object
profile.string = "SR_BH_steep",     # substring of profile parameter
profile.label=expression(Steepness(italic(h)[])),
pheight=4.5,
print=FALSE,
plotdir=mydir,
components = mainlike_components,
component.labels = mainlike_components_labels,
add_cutoff = F,
cutoff_prob = 0.95)
dev.off()
SSplotProfile(profilesummary,           # summary object
profile.string = "SR_BH_steep",     # substring of profile parameter
profile.label=expression(Steepness(italic(h)[])),
pheight=4.5,
print=FALSE,
plotdir=mydir,
components = mainlike_components,
component.labels = mainlike_components_labels,
add_cutoff = F,
cutoff_prob = 0.95)
dev.off()
# make timeseries plots comparing models in profile
labs <- paste("SR_BH_steep = ",h.vec)
# make timeseries plots comparing models in profile
SSplotComparisons(profilesummary,legendlabels=paste("h =",h.vec),
pheight=4.5,png=TRUE,plotdir=mydir,legendloc='topright')
dev.off()
###Piner plot
png(file.path(mydir,"Steep_profile_plot_Length_like.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
PinerPlot(profilesummary,
profile.string = "SR_BH_steep",
profile.label=expression(Steepness(italic(h)[])),
component = "Length_like",
main = "Changes in length-composition likelihoods by fleet",
add_cutoff = F,
cutoff_prob = 0.95)
dev.off()
png(file.path(mydir,"Steep_profile_plot_Survey_like.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
PinerPlot(profilesummary,
profile.string = "SR_BH_steep",
profile.label=expression(Steepness(italic(h)[])),
component = "Surv_like",
main = "Changes in Index likelihoods by fleet",
add_cutoff = TRUE,
cutoff_prob = 0.95, legendloc="topleft")
dev.off()
mydir <- "C:/Users/demersais/Desktop/Cabrinha/Likehood_M"
# read starter file
starter <- SS_readstarter(file.path(mydir, 'starter.ss'))
# change control file name in the starter file
starter$ctlfile <- "control_modified.ss"
# make sure the prior likelihood is calculated
# for non-estimated quantities
starter$prior_like <- 1
# write modified starter file
SS_writestarter(starter, dir=mydir, overwrite=TRUE)
library(r4ss)
mydir <- "C:/Users/demersais/Desktop/Cabrinha/Likehood_M"
# read starter file
starter <- SS_readstarter(file.path(mydir, 'starter.ss'))
# change control file name in the starter file
starter$ctlfile <- "control_modified.ss"
# make sure the prior likelihood is calculated
# for non-estimated quantities
starter$prior_like <- 1
# write modified starter file
SS_writestarter(starter, dir=mydir, overwrite=TRUE)
# vector of values to profile over
h.vec <- seq(0.3
,0.7
,0.1)
Nprofile <- length(h.vec)
# run SS_profile command
profile <- SS_profile(dir=mydir, # directory
# "NatM" is a subset of one of the
# parameter labels in control.ss_new
model="ss",
masterctlfile="control.ss_new",
newctlfile="control_modified.ss",
string="NatM_uniform_Fem_GP_1",
profilevec=h.vec)
# read the output files (with names like Report1.sso, Report2.sso, etc.)
profilemodels <- SSgetoutput(dirvec=mydir, keyvec =1:Nprofile)
# summarize output
profilesummary <- SSsummarize(profilemodels)
mainlike_components         <- c('TOTAL',"Survey", "Discard", 'Length_comp',"Age_comp",'Recruitment')
mainlike_components_labels  <- c('Total likelihood','Index likelihood',"Discard",'Length likelihood',"Age likelihood",'Recruitment likelihood')
# plot profile using summary created above
png(file.path(mydir,"NatM_profile_plot.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
SSplotProfile(profilesummary,           # summary object
profile.string = "NatM_uniform_Fem_GP_1",     # substring of profile parameter
profile.label="NatM_F",
pheight=4.5,
print=FALSE,
plotdir=mydir,
components = mainlike_components,
component.labels = mainlike_components_labels,
add_cutoff = F,
cutoff_prob = 0.95)
dev.off()
# make timeseries plots comparing models in profile
labs <- paste("NatM_F = ",h.vec)
# make timeseries plots comparing models in profile
SSplotComparisons(profilesummary,legendlabels=paste("h =",h.vec),
pheight=4.5,png=TRUE,plotdir=mydir,legendloc='topright')
dev.off()
###Piner plot
png(file.path(mydir,"Steep_profile_plot_Length_like.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
PinerPlot(profilesummary,
profile.string = "NatM_uniform_Fem_GP_1",
profile.label="NatM_F",
component = "Length_like",
main = "Changes in length-composition likelihoods by fleet",
add_cutoff = F,
cutoff_prob = 0.95)
dev.off()
png(file.path(mydir,"Steep_profile_plot_Survey_like.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
PinerPlot(profilesummary,
profile.string = "NatM_uniform_Fem_GP_1",
profile.label="NatM_F",
component = "Surv_like",
main = "Changes in Index likelihoods by fleet",
add_cutoff = TRUE,
cutoff_prob = 0.95, legendloc="topleft")
dev.off()
# read the output files (with names like Report1.sso, Report2.sso, etc.)
profilemodels <- SSgetoutput(dirvec=mydir, keyvec =1:Nprofile)
# read the output files (with names like Report1.sso, Report2.sso, etc.)
profilemodels <- SSgetoutput(dirvec=mydir, keyvec =1:Nprofile)
# summarize output
profilesummary <- SSsummarize(profilemodels)
# vector of values to profile over
h.vec <- seq(0.3001
,0.6508
,0.0501)
Nprofile <- length(h.vec)
# run SS_profile command
profile <- SS_profile(dir=mydir, # directory
# "NatM" is a subset of one of the
# parameter labels in control.ss_new
model="ss",
masterctlfile="control.ss_new",
newctlfile="control_modified.ss",
string="NatM_uniform_Fem_GP_1",
profilevec=h.vec)
# read the output files (with names like Report1.sso, Report2.sso, etc.)
profilemodels <- SSgetoutput(dirvec=mydir, keyvec =1:Nprofile)
# summarize output
profilesummary <- SSsummarize(profilemodels)
mainlike_components         <- c('TOTAL',"Survey", "Discard", 'Length_comp',"Age_comp",'Recruitment')
mainlike_components_labels  <- c('Total likelihood','Index likelihood',"Discard",'Length likelihood',"Age likelihood",'Recruitment likelihood')
# plot profile using summary created above
png(file.path(mydir,"NatM_profile_plot.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
SSplotProfile(profilesummary,           # summary object
profile.string = "NatM_uniform_Fem_GP_1",     # substring of profile parameter
profile.label="NatM_F",
pheight=4.5,
print=FALSE,
plotdir=mydir,
components = mainlike_components,
component.labels = mainlike_components_labels,
add_cutoff = F,
cutoff_prob = 0.95)
dev.off()
# make timeseries plots comparing models in profile
labs <- paste("NatM_F = ",h.vec)
# make timeseries plots comparing models in profile
SSplotComparisons(profilesummary,legendlabels=paste("h =",h.vec),
pheight=4.5,png=TRUE,plotdir=mydir,legendloc='topright')
dev.off()
###Piner plot
png(file.path(mydir,"Steep_profile_plot_Length_like.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
PinerPlot(profilesummary,
profile.string = "NatM_uniform_Fem_GP_1",
profile.label="NatM_F",
component = "Length_like",
main = "Changes in length-composition likelihoods by fleet",
add_cutoff = F,
cutoff_prob = 0.95)
dev.off()
png(file.path(mydir,"Steep_profile_plot_Survey_like.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
PinerPlot(profilesummary,
profile.string = "NatM_uniform_Fem_GP_1",
profile.label="NatM_F",
component = "Surv_like",
main = "Changes in Index likelihoods by fleet",
add_cutoff = TRUE,
cutoff_prob = 0.95, legendloc="topleft")
dev.off()
# vector of values to profile over
h.vec <- seq(0.30001
,0.65008
,0.05001)
Nprofile <- length(h.vec)
# run SS_profile command
profile <- SS_profile(dir=mydir, # directory
# "NatM" is a subset of one of the
# parameter labels in control.ss_new
model="ss",
masterctlfile="control.ss_new",
newctlfile="control_modified.ss",
string="NatM_uniform_Fem_GP_1",
profilevec=h.vec)
# read the output files (with names like Report1.sso, Report2.sso, etc.)
profilemodels <- SSgetoutput(dirvec=mydir, keyvec =1:Nprofile)
# summarize output
profilesummary <- SSsummarize(profilemodels)
mainlike_components         <- c('TOTAL',"Survey", "Discard", 'Length_comp',"Age_comp",'Recruitment')
mainlike_components_labels  <- c('Total likelihood','Index likelihood',"Discard",'Length likelihood',"Age likelihood",'Recruitment likelihood')
# plot profile using summary created above
png(file.path(mydir,"NatM_F_profile_plot.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
SSplotProfile(profilesummary,           # summary object
profile.string = "NatM_uniform_Fem_GP_1",     # substring of profile parameter
profile.label="NatM_F",
pheight=4.5,
print=FALSE,
plotdir=mydir,
components = mainlike_components,
component.labels = mainlike_components_labels,
add_cutoff = F,
cutoff_prob = 0.95)
dev.off()
# make timeseries plots comparing models in profile
labs <- paste("NatM_F = ",h.vec)
# make timeseries plots comparing models in profile
SSplotComparisons(profilesummary,legendlabels=paste("h =",h.vec),
pheight=4.5,png=TRUE,plotdir=mydir,legendloc='topright')
# make timeseries plots comparing models in profile
SSplotComparisons(profilesummary,legendlabels=paste("NatM_F =",h.vec),
pheight=4.5,png=TRUE,plotdir=mydir,legendloc='topright')
dev.off()
###Piner plot
png(file.path(mydir,"NatM_F_profile_plot_Length_like.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
PinerPlot(profilesummary,
profile.string = "NatM_uniform_Fem_GP_1",
profile.label="NatM_F",
component = "Length_like",
main = "Changes in length-composition likelihoods by fleet",
add_cutoff = F,
cutoff_prob = 0.95)
dev.off()
png(file.path(mydir,"NatM_F_plot_Survey_like.png"),width=7,height=4.5,res=300,units='in')
par(mar=c(5,4,1,1))
PinerPlot(profilesummary,
profile.string = "NatM_uniform_Fem_GP_1",
profile.label="NatM_F",
component = "Surv_like",
main = "Changes in Index likelihoods by fleet",
add_cutoff = TRUE,
cutoff_prob = 0.95, legendloc="topleft")
dev.off()
replist <- SS_output("C:/Users/demersais/Desktop/Cabrinha/Carbinha_4Fleet82")
library(r4ss)
replist <- SS_output("C:/Users/demersais/Desktop/Cabrinha/Carbinha_4Fleet82")
SS_plots(replist,forecastplot =F)
library(r4ss)
replist <- SS_output("C:/Users/demersais/Desktop/Cabrinha_testes_novo\CPUE_test01")
replist <- SS_output("C:/Users/demersais/Desktop/Cabrinha_testes_novo/CPUE_test01")
SS_plots(replist,forecastplot =F)
replist <- SS_output("C:/Users/demersais/Desktop/Cabrinha_testes_novo/CPUE_test01")
SS_plots(replist,forecastplot =F)
replist <- SS_output("C:/Users/demersais/Desktop/Cabrinha_testes_novo/CPUE_test02")
SS_plots(replist,forecastplot =F)
##
# Jitter Test for Global Convergence with Stock Synthesis
# Stock Synthesis (tested in version 3_30_X for Windows)
# r4ss (tested in version(s) 1.35.1 - 1.35.3)
# R (tested in version(s) 3.3.2 - 3.5.2 64 bit Windows)
##
library(r4ss)
# Step 1. Define the root directory for the run
dirname.root <- "C:/Users/demersais/Desktop/Likehood_WSKJ/Jitter"
dirname.root
# Step 2. Define the directory where a completed "base" model run is located
dirname.base <- paste0("C:/Users/demersais/Desktop/Likehood_WSKJ/WSKJ_RefCase")
dirname.base
# Step 3. Create a subdirectory for the jitter run
dirname.jitter <- paste0(dirname.root,'/jitter')
dirname.jitter
dir.create(path=dirname.jitter, showWarnings = TRUE, recursive = TRUE)
# Step 4. Create a subdirectory for the output
dirname.plots <- paste0(dirname.root,"/plots")
dirname.plots
dir.create(dirname.plots)
# Step 2. Copy base model files to jitter directory
file.copy(paste(dirname.base,       "starter.ss", sep="/"),
paste(dirname.jitter,     "starter.ss", sep="/"))
file.copy(paste(dirname.base,       "control.ss_new", sep="/"),
paste(dirname.jitter,     "control.ss_new", sep="/"))
file.copy(paste(dirname.base,       "data.ss_new", sep="/"),
paste(dirname.jitter,     "data.ss_new", sep="/"))
file.copy(paste(dirname.base,       "forecast.ss", sep="/"),
paste(dirname.jitter,     "forecast.ss", sep="/"))
file.copy(paste(dirname.base,       "ss.exe", sep="/"),
paste(dirname.jitter,     "ss.exe", sep="/"))
file.copy(paste(dirname.base,       "ss.par", sep="/"),
paste(dirname.jitter,     "ss.par", sep="/"))
# Step 5. Make Changes to the Starter.ss file (r4ss example)
starter <- SS_readstarter(file.path(dirname.jitter, 'starter.ss'))
# Step 6. Change to use .par file
starter$init_values_src = 1
# Step 7. Change jitter (0.1 is an arbitrary, but common choice for jitter amount)
starter$jitter_fraction = 0.1
# Step 8. write modified starter file
SS_writestarter(starter, dir=dirname.jitter, overwrite=TRUE)
# Step 8. write modified starter file
SS_writestarter(starter, dir=dirname.jitter, overwrite=TRUE)
# Step 9. Set the number of iteration
Njitter=50
# Step 10. Run jitter using this function (deafult is nohess)
jit.likes <- SS_RunJitter(mydir=dirname.jitter, Njitter=Njitter, extras="")
setwd(dirname.plots)
getwd()
# Step 11. Total likelihoods necessary to assess global convergence are saved to "jit.likes"
x<-as.numeric(jit.likes)
global.convergence.check<-table(x,exclude = NULL)
write.table(jit.likes,"jit_like.csv")
write.table(global.convergence.check,"global_convergence_check.csv")
wd <- dirname.jitter
jitter=seq(1:Njitter)
n=length(jitter)
n
witch_j <- SSgetoutput(keyvec=1:n, getcomp=FALSE, dirvec=wd, getcovar=F)
witch_j_summary <- SSsummarize(witch_j)
#Likelihood across runs
likes=witch_j_summary$likelihoods
#Derived quants across runs
quants=witch_j_summary$quants
#Estimated parameters across runs
pars=witch_j_summary$pars
#Write more output tables to jitter directory
write.table(quants,"Quants.csv")
write.table(pars,"Pars.csv")
write.table(likes,"Likelihoods.csv")
#Retabulate total likelihoods necessary to assess global convergence and compare to jit.likes from above
x<-as.numeric(likes[likes$Label=="TOTAL",1:n])
global.convergence<-table(x,exclude = NULL)
write.table(global.convergence,"global_convergence.csv")
#------------ Make plots with r4ss for runs ending at a converged solution -------------------------------
#Base case read in manually
Base <- SS_output(dir=dirname.base,covar=T,forecast=T)
#make some plots#make some plots
plotdir <- dirname.plots
setwd(plotdir)
getwd()
plot(seq(1:Njitter), witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL",1:Njitter],ylab="LL",
ylim=c(0,max(na.omit(jit.likes))*1.05)) ; mtext(side=3, line=0, "Jittering")
abline(h=Base$likelihoods_used[1,1], col=2)
mtext(outer=T, side=3, line=-2.5, "Jitter results")
dev.off()
png("Jittering results.png")
plot(seq(1:Njitter), witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL",1:Njitter],ylab="LL",
ylim=c(0,max(na.omit(jit.likes))*1.05)) ; mtext(side=3, line=0, "Jittering")
abline(h=Base$likelihoods_used[1,1], col=2)
dev.off()
SSplotComparisons(witch_j_summary,     png=TRUE , pch = "",legend=FALSE, plotdir = plotdir, ylimAdj=1)
plot(seq(1:Njitter),
witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL",1:Njitter],
ylab="Total likelihood",
ylim=c(0,max(na.omit(jit.likes))*1.05),
xlab="Jitter model runs at a converged solution"
)
#mtext(side=3, line=0, "Jittering")
abline(h=Base$likelihoods_used[1,1], col=2)
png("jit likes.png", width = 480, height = 480)
par(mfrow=c(1,1), mai=c(.6,.6,.3,.2), mex=.5)
plot(seq(1:Njitter),
witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL",1:Njitter],
ylab="Total likelihood",
ylim=c(0,max(na.omit(jit.likes))*1.05),
xlab="Jitter model runs at a converged solution"
)
#mtext(side=3, line=0, "Jittering")
abline(h=Base$likelihoods_used[1,1], col=2)
dev.off()
# Repeat for all converged runs
x<-which(!is.na(witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL",1:Njitter]))
jitter.converged=x
jitter.converged
n.converged=length(jitter.converged)
n.converged
witch_j.converged <- SSgetoutput(keyvec=jitter.converged, getcomp=FALSE, dirvec=wd, getcovar=F)
witch_j_summary.converged <- SSsummarize(witch_j.converged)
plot(seq(jitter.converged),
witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL", jitter.converged],
ylab="Total likelihood",
ylim=c(0,max(na.omit(jit.likes))*1.05),
xlab="Jitter runs at a converged solution"
)
mtext(side=3, line=0, "Jittering")
plot(seq(jitter.converged),
witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL", jitter.converged],
ylab="Total likelihood",
ylim=c(0,max(na.omit(jit.likes))*1.05),
xlab="Jitter runs at a converged solution"
)
png("Jittering results at converged solution.png", width = 480, height = 480)
plot(seq(jitter.converged),
witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL", jitter.converged],
ylab="Total likelihood",
ylim=c(0,max(na.omit(jit.likes))*1.05),
xlab="Jitter runs at a converged solution"
)
mtext(side=3, line=0, "Jittering")
abline(h=Base$likelihoods_used[1,1], col=2)
dev.off()
#Repeat for converged runs at the minimum solution
#Converged runs at min converged solution (should be same as base case to pass the test)
#min(na.omit(jit.likes))
y<-which(witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL",1:Njitter]==min(na.omit(jit.likes)))
jitter.min=y
jitter.min
n.min=length(jitter.min)
n.min
witch_j.min <- SSgetoutput(keyvec=jitter.min, getcomp=FALSE, dirvec=wd, getcovar=F)
witch_j_summary.min <- SSsummarize(witch_j.min)
plot(seq(jitter.min),
witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL", jitter.min],
ylab="Total likelihood",
ylim=c(0,max(na.omit(jit.likes))*1.05),
xlab="Jitter runs at the minimum converged solution"
)
png("Jittering results at min converged solution.png", width = 480, height = 480)
plot(seq(jitter.min),
witch_j_summary$likelihoods[witch_j_summary$likelihoods$Label=="TOTAL", jitter.min],
ylab="Total likelihood",
ylim=c(0,max(na.omit(jit.likes))*1.05),
xlab="Jitter runs at the minimum converged solution"
)
mtext(side=3, line=0, "Jittering")
abline(h=Base$likelihoods_used[1,1], col=2)
dev.off()
dev.off()
SSplotComparisons(witch_j_summary.min, png=TRUE , pch = "",legend=FALSE, plotdir = plotdir, ylimAdj=1)
