# Visualize o resultado
df1
# Crie dois data.frames de exemplo
df1 <- data.frame(x = c(1, NA, 3), y = c(NA, 5, 6))
df2 <- data.frame(x = c(3, 2, 1), y = c(6, 5, 4))
# Crie uma matriz de índices para as posições dos valores NA em df1
indices <- which(is.na(df1), arr.ind = TRUE)
# Substitua os valores NA por valores observados em df2, nas mesmas posições
df3[indices] <- df2[indices]
# Substitua os valores NA por valores observados em df2, nas mesmas posições
df3 <- df1
df3[indices] <- df2[indices]
df3
## Idade dos alunos
alunos <- c(22, 21, 24, 23, 20, 22, 21, 25, 24, 24, 23, 19, 25, 24,
23, 23, 20, 21, 23, 20, 23, 22, 23, 23, 25, 25, 20, 23,
24, 20)
alunos
## Média da população
mean(alunos)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
sample(alunos, size = 5, replace = TRUE)
## Amostras
amostra01 <- sample(alunos, size = 5)
amostra02 <- sample(alunos, size = 5)
amostra03 <- sample(alunos, size = 5)
amostra04 <- sample(alunos, size = 5)
amostra05 <- sample(alunos, size = 5)
## Médias amostrais
mean(amostra01)
mean(amostra02)
mean(amostra03)
mean(amostra04)
mean(amostra05)
## Erros
mean(amostra01) - 22.5
mean(amostra02) - 22.5
mean(amostra03) - 22.5
mean(amostra04) - 22.5
mean(amostra05) - 22.5
mean(c(mean(amostra01),
mean(amostra02),
mean(amostra03),
mean(amostra04),
mean(amostra05)))
22.64-22.5
amostra <- NULL
for(i in 1:100) {
amostra[i] <- mean(sample(alunos, 5))
}
mean(amostra)
amostra <- NULL
for(i in 1:1000) {
amostra[i] <- mean(sample(alunos, 5))
}
mean(amostra)
round(mean(amostra), 1)
amostra <- NULL
for(i in 1:100000) {
amostra[i] <- mean(sample(alunos, 5))
}
mean(amostra)
amostra <- NULL
for(i in 1:1000000) {
amostra[i] <- mean(sample(alunos, 5))
}
mean(amostra)
sample()
sample
12.41+57.02+16.77+36+9.61+7.04
remotes::install_github("jcrodriguez1989/chatgpt")
Sys.setenv(OPENAI_API_KEY = "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")
library(chatgpt)
cat(ask_chatgpt("What do you think about R language?"))
cat(ask_chatgpt("What do you think about R language?"))
cat(ask_chatgpt("What do you think about R language?"))
A <- c(9.2, 10.8, 10.6, 11.1, 12.1, 9.6, 11.2, 8.4, 12.9, 12.1, 14.4, 11.1, 11.1,
9.7, 8.4, 12.3, 10.7, 12.9, 9.1, 12.8)
mean(A)
round(mean(A), 2)
median(A)
sd(A)
sd(A)^2
sd(A)/mean(A)
(sd(A)/mean(A))*100
B <- c(12.5, 18.5, 21.3, 14.3, 18.5, 19, 10.8, 23.1, 17.4, 10.7, 14.3, 16.3,
18, 7.1, 12.8, 14.7, 11.3, 8.2, 13.8)
mean(B)
median(B)
sd(B)
sd(B)^2
sd(B)/mean(B)
(sd(B)/mean(B))*100
# litsearchr isn't yet on CRAN, need to install from github
if (require(litsearchr)) remotes::install_github("elizagrames/litsearchr", ref = "main")
remotes::install_github("elizagrames/litsearchr", ref = "main")
# Packages to load/install
packages <- c(
"easyPubMed",
"litsearchr", "stopwords", "igraph",
"ggplot2", "ggraph", "ggrepel"
)
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Load packages
lapply(packages, library, character.only = TRUE)
2+2
2+
2
2 + 2
2 + 2
2 + 2
2 + 2
2 + 2
2 + 2
2 + 2
2 + 2
2 + 2
# Isto é uma operação de adição
Isto é uma operação de adição
# Isto é uma operação de adição
2 + 2
# Isto é uma operação de subtração
2 - 2
# ISto é uma divisão...
2 / 2
# Isto é uma multiplicação
2 * 2
# Isto é uma potenciação
2 ^ 2
2 ** 2
# Está é minha primeira função do R...
log(10)
# Está é minha primeira função do R...
log(x = 10, base = 2)
# Está é minha primeira função do R...
log(x=10, base=2)
# Isto é um objeto no R...
x <- 2
# Isto é um objeto no R...
x <- 2 + 2
x + 2
y <- x + 2
x = 2 + 2
0 = 2
0 == 2
2 != 0
2 > 0
2 < 0
2 >= 2
2 <= 2
## Construíndo meu primeiro vetor...
c(20, 22, 33, 20, 18)
## Construíndo meu primeiro vetor...
idades <- c(20, 22, 33, 20, 18)
idades[3]
idades[3] <- 18
city <- c("Blumenau", "Itajaí", "Navegantes")
city[1]
shithappens <- c("Blumenau", 22, "Itajaí")
## Operação entre vetores...
vec01 <- c(2, 3, 4)
vec02 <- c(3, 4, 5)
vec01 + vec02
vec02 <- c(3, 4)
vec01 + vec02
## Operação entre vetores...
vec01 <- c(2, 3, 4, 5)
vec02 <- c(3, 4)
vec01 + vec02
### Evolução para matrix
mat <- matrix(vec01, nrow = 2)
mat
mat[2, 2]
### Evolução para matrix
mat <- matrix(vec01, nrow = 3)
### Evolução para matrix
mat <- matrix(vec01, nrow = 2)
### Evolução para data.frame
df <- data.frame(
aluno = c("Gabrielly", "Gabriel", "Alana"),
cidade = c("Brusque", "Blumenau", "Pernambuco"),
idade = c(20, 22, 20)
)
df
install.packages("basedosdados")
library("basedosdados")
# Defina o seu projeto no Google Cloud
set_billing_id("<YOUR_PROJECT_ID>")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
# Defina o seu projeto no Google Cloud
set_billing_id("<YOUR_PROJECT_ID>")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
# Defina o seu projeto no Google Cloud
set_billing_id("TestingBasedosDadosOrg")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
# Defina o seu projeto no Google Cloud
set_billing_id("TestingBasedosDadosOrg")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
rlang::last_trace()
install.packages("basedosdados")
library("basedosdados")
# Defina o seu projeto no Google Cloud
set_billing_id("testingbasedosdadosorg")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
df <- bd_collect(query)
View(df)
library(openMSE)
install.packages(c("openMSE", "DLMtool", "SAMtool", "MSEtool"), dependencies = TRUE)
library(openMSE)
install.packages("TMB", type = "source")
install.packages("TMB", type = "source")
library(openMSE)
Islope1(1, MSEtool::SimulatedData, plot=TRUE)
MSEtool::SimulatedData
Islope1
Islope_
## Tamanho da amostra
n <- 10
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
setwd("~/Dropbox/Works/DatenKraft/Projetos/Aprovados/W-SKJ_MSE_2024_01/R-Work/W-SKJ_Future_Work_Set_2024/01_OMs")
x <- readRDS("SS_Operating_models_ver02.rds")
x[[1]]@cpars$Data
plot_SS2OM(x[[1]])
