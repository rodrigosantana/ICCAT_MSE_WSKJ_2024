0 == 2
2 != 0
2 > 0
2 < 0
2 >= 2
2 <= 2
## Construíndo meu primeiro vetor...
c(20, 22, 33, 20, 18)
## Construíndo meu primeiro vetor...
idades <- c(20, 22, 33, 20, 18)
idades[3]
idades[3] <- 18
city <- c("Blumenau", "Itajaí", "Navegantes")
city[1]
shithappens <- c("Blumenau", 22, "Itajaí")
## Operação entre vetores...
vec01 <- c(2, 3, 4)
vec02 <- c(3, 4, 5)
vec01 + vec02
vec02 <- c(3, 4)
vec01 + vec02
## Operação entre vetores...
vec01 <- c(2, 3, 4, 5)
vec02 <- c(3, 4)
vec01 + vec02
### Evolução para matrix
mat <- matrix(vec01, nrow = 2)
mat
mat[2, 2]
### Evolução para matrix
mat <- matrix(vec01, nrow = 3)
### Evolução para matrix
mat <- matrix(vec01, nrow = 2)
### Evolução para data.frame
df <- data.frame(
aluno = c("Gabrielly", "Gabriel", "Alana"),
cidade = c("Brusque", "Blumenau", "Pernambuco"),
idade = c(20, 22, 20)
)
df
install.packages("basedosdados")
library("basedosdados")
# Defina o seu projeto no Google Cloud
set_billing_id("<YOUR_PROJECT_ID>")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
# Defina o seu projeto no Google Cloud
set_billing_id("<YOUR_PROJECT_ID>")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
# Defina o seu projeto no Google Cloud
set_billing_id("TestingBasedosDadosOrg")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
# Defina o seu projeto no Google Cloud
set_billing_id("TestingBasedosDadosOrg")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
rlang::last_trace()
install.packages("basedosdados")
library("basedosdados")
# Defina o seu projeto no Google Cloud
set_billing_id("testingbasedosdadosorg")
# Para carregar o dado direto no R
query <- bdplyr("br_mme_consumo_energia_eletrica.uf")
df <- bd_collect(query)
View(df)
library(openMSE)
install.packages(c("openMSE", "DLMtool", "SAMtool", "MSEtool"), dependencies = TRUE)
library(openMSE)
install.packages("TMB", type = "source")
install.packages("TMB", type = "source")
library(openMSE)
Islope1(1, MSEtool::SimulatedData, plot=TRUE)
MSEtool::SimulatedData
Islope1
Islope_
## Tamanho da amostra
n <- 10
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- NULL
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1) }
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000000
## Objeto para armazenar os resultados x <- numeric(n)
## Estrutura de repetição
x <- numeric(n)
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
furg <- c(23.99,
13.79,
14.12,
4.03,
6.38,
6.41,
7.91,
8.20,
3.12,
4.66,
3.59,
3.15,
0.60,
0.05)
aoceano <- c(28.92,
11.57,
21.81,
2.89,
3.49,
6.99,
6.27,
5.18,
4.94,
NA,
NA,
NA,
2.41,
NA)
chisq.test(furg, aoceano)
chisq.test(furg[1:9], aoceano[1:9])
cor(furg, aoceano)
cor(furg, aoceano, use = "complete.obs")
set.seed(1)
## Tamanho da amostra
n <- 10
## Objeto para armazenar os resultados
x <- numeric(n)
## Estrutura de repetição
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100
## Objeto para armazenar os resultados
x <- numeric(n)
## Estrutura de repetição
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
x
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000
## Objeto para armazenar os resultados
x <- numeric(n)
## Estrutura de repetição
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 10000
## Objeto para armazenar os resultados
x <- numeric(n)
## Estrutura de repetição
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 100000
## Objeto para armazenar os resultados
x <- numeric(n)
## Estrutura de repetição
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
## Tamanho da amostra
n <- 1000000
## Objeto para armazenar os resultados
x <- numeric(n)
## Estrutura de repetição
# Repetir n vezes
for(i in 1:n){
# Amostra aleatória de tamanho 1 dos números 1 a 6
x[i] <- sample(1:6, size = 1)
}
## Total de valores igual a 4 => n(A)
sum(x == 4)
## Proporção de valores igual a 4 => n(A)/n
sum(x == 4)/length(x)
(8.9*0.4)+(7*0.6)
(8.9*0.5)+(7*0.5)
(9.5*0.5)+(9*0.5)
sd(c(0, 2, 4, 5, 5, 6, 8, 10))
sd(c(4, 4.5, 5, 5, 5, 5, 5.5, 6))
sqrt((0.51*0.49)/829)
sqrt((0.51*0.49)/829) * 1.96
0.51-0.03403
t.test(1:10, y = c(7:20))      # P = .00001855
t.test(1:10, y = c(7:20, 200)) # P = .1245    -- NOT significant anymore
## Classical example: Student's sleep data
plot(extra ~ group, data = sleep)
## Traditional interface
with(sleep, t.test(extra[group == 1], extra[group == 2]))
## Formula interface
t.test(extra ~ group, data = sleep)
## Formula interface to one-sample test
t.test(extra ~ 1, data = sleep)
setwd("~/Dropbox/Works/DatenKraft/Projetos/Aprovados/W-SKJ_MSE_2024_01/R-Work/W-SKJ_Future_Work_Set_2024")
#####@> MSEtool (3.7.2) however, Adrian had answered that version
#####@> 3.7.9999 is OK!
if(packageVersion("MSEtool") == "3.7.9999") {
print("MSEtool R package already installed is the correct version")
} else {
pak::pkg_install("blue-matter/MSEtool")
}
#####@> SAMtool (1.6.4)...
if(packageVersion("SAMtool") == "1.6.4") {
print("SAMtool R package already installed is the correct version")
} else {
pak::pkg_install("blue-matter/SAMtool")
}
if(packageVersion("openMSE") == "1.1.1") {
print("openMSE R package already installed is the correct version")
} else {
pak::pkg_install("blue-matter/openMSE")
}
#####@> nswo-mse (0.25.1)...
if(packageVersion("SWOMSE") == "0.25.1") {
print("SWOMSE R package already installed is the correct version")
} else {
pak::pkg_install("ICCAT/nswo-mse")
}
#####@> nswo-mse (0.25.1)...
if(packageVersion("SWOMSE") == "0.25.1") {
print("SWOMSE R package already installed is the correct version")
} else {
pak::pkg_install("ICCAT/nswo-mse")
}
pak::pkg_install("ICCAT/nswo-mse")
######@> Package list...
library(dplyr)
library(openMSE)
## library(SWOMSE)
library(ggmse)
devtools::install_github("pbs-assess/ggmse")
devtools::install_github("pbs-assess/ggmse")
## library(SWOMSE)
library(ggmse)
library(SWOMSE)
######@> Loading history objects...
Hists <- sapply(dir("02_Hists", full.names = TRUE), readRDS)
#####@> Setting names for Hists...
names(Hists) <- paste0("OM", sprintf("%03d", 1:27))
Data <- Hists[[5]]@Data
Iratio()
Iratio
?Iratio
